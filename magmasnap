#!/bin/bash
# üåã magmasnap - Ultra-minimal snapshot backup utility
# Copy this file anywhere and run: chmod +x magmasnap && ./magmasnap save
# Zero configuration required - just works!

set -e

# Configuration (edit if needed)
BACKUP_ROOT="${MAGMASNAP_DIR:-$HOME/.magmasnap}"
EXCLUDE_PATTERNS=".git node_modules dist build vendor .next target __pycache__ .venv venv"

# Colors
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Check for rsync
if ! command -v rsync &> /dev/null; then
    echo -e "${RED}‚ùå rsync is not installed${NC}"
    echo "Install it with:"
    echo "  ‚Ä¢ Ubuntu/Debian: sudo apt-get install rsync"
    echo "  ‚Ä¢ macOS: brew install rsync (or use built-in)"
    echo "  ‚Ä¢ Fedora/RHEL: sudo dnf install rsync"
    exit 1
fi

CURRENT_DIR="$(pwd)"
PROJECT_NAME=$(basename "$CURRENT_DIR")
TIMESTAMP=$(date +%Y%m%d_%H%M%S)

# Build rsync exclude args
EXCLUDE_ARGS=""
for pattern in $EXCLUDE_PATTERNS; do
    EXCLUDE_ARGS="$EXCLUDE_ARGS --exclude=$pattern"
done

case "$1" in
  save|s)
    TAG="${2:-}"
    if [ -n "$TAG" ]; then
        BACKUP_PATH="$BACKUP_ROOT/${PROJECT_NAME}_${TIMESTAMP}_${TAG}"
    else
        BACKUP_PATH="$BACKUP_ROOT/${PROJECT_NAME}_${TIMESTAMP}"
    fi

    echo -e "${BLUE}üåã Creating snapshot...${NC}"
    mkdir -p "$BACKUP_PATH"

    # Use rsync for efficient backup
    rsync -a --info=progress2 $EXCLUDE_ARGS "$CURRENT_DIR/" "$BACKUP_PATH/" 2>&1 | grep -v "^$" || true

    SIZE=$(du -sh "$BACKUP_PATH" 2>/dev/null | awk '{print $1}')
    echo -e "${GREEN}‚úì Snapshot saved${NC} ($SIZE)"
    echo -e "  ${BACKUP_PATH}"
    ;;

  list|l)
    echo -e "${BLUE}üìã Snapshots for ${PROJECT_NAME}:${NC}"
    if [ ! -d "$BACKUP_ROOT" ]; then
      echo "  No snapshots found - backup directory does not exist yet"
      exit 0
    fi

    COUNT=$(find "$BACKUP_ROOT" -maxdepth 1 -type d -name "${PROJECT_NAME}_*" 2>/dev/null | wc -l)
    if [ "$COUNT" -eq 0 ]; then
      echo "  No snapshots found for this project"
    else
      # List with sizes and numbers
      IDX=1
      find "$BACKUP_ROOT" -maxdepth 1 -type d -name "${PROJECT_NAME}_*" -print0 2>/dev/null | \
        xargs -0 ls -td | \
        head -20 | \
        while IFS= read -r SNAP_PATH; do
          SIZE=$(du -sh "$SNAP_PATH" 2>/dev/null | awk '{print $1}' || echo "?")
          NAME="${SNAP_PATH##*/}"
          echo "  $IDX. $NAME ($SIZE)"
          IDX=$((IDX + 1))
        done

      if [ "$COUNT" -gt 20 ]; then
        echo -e "\n  ... and $((COUNT - 20)) more"
      fi
    fi
    ;;

  restore|r)
    # Check if backup directory and snapshots exist
    if [ ! -d "$BACKUP_ROOT" ]; then
      echo -e "${RED}‚ùå No snapshots found for this project${NC}"
      echo "Create one with: mgms save"
      exit 1
    fi

    COUNT=$(find "$BACKUP_ROOT" -maxdepth 1 -type d -name "${PROJECT_NAME}_*" 2>/dev/null | wc -l)
    if [ "$COUNT" -eq 0 ]; then
      echo -e "${RED}‚ùå No snapshots found for this project${NC}"
      echo "Create one with: mgms save"
      exit 1
    fi

    # Default to snapshot #1 if no number specified
    SNAPSHOT_NUM="${2:-1}"

    # Find the Nth snapshot
    BACKUP=$(find "$BACKUP_ROOT" -maxdepth 1 -type d -name "${PROJECT_NAME}_*" -print0 2>/dev/null | \
             xargs -0 ls -td | sed -n "${SNAPSHOT_NUM}p")

    if [ -z "$BACKUP" ]; then
      echo -e "${RED}‚ùå Snapshot #$SNAPSHOT_NUM not found${NC}"
      echo "Use 'mgms list' to see available snapshots"
      exit 1
    fi

    BACKUP_PATH="$BACKUP"
    echo -e "${YELLOW}‚ö†Ô∏è  WARNING: This will restore from:${NC}"
    echo -e "  ${BACKUP_PATH}"
    echo -e "  ${YELLOW}to:${NC} $CURRENT_DIR"
    echo ""
    read -p "Continue? (y/n): " confirm

    if [[ "$confirm" =~ ^[Yy](es)?$ ]]; then
      echo -e "${BLUE}üåã Restoring...${NC}"
      rsync -a --info=progress2 --delete \
        --exclude='.git' --exclude='node_modules' \
        "$BACKUP_PATH/" "$CURRENT_DIR/" 2>&1 | grep -v "^$" || true
      echo -e "${GREEN}‚úì Restored successfully${NC}"
    else
      echo "Cancelled"
    fi
    ;;

  diff|d)
    # Default to snapshot #1 if no number specified
    SNAPSHOT_NUM="${2:-1}"

    BACKUP=$(find "$BACKUP_ROOT" -maxdepth 1 -type d -name "${PROJECT_NAME}_*" -print0 2>/dev/null | \
             xargs -0 ls -td | sed -n "${SNAPSHOT_NUM}p")

    if [ -z "$BACKUP" ]; then
      echo -e "${RED}‚ùå Snapshot #$SNAPSHOT_NUM not found${NC}"
      exit 1
    fi

    echo -e "${BLUE}üìä Changes since snapshot #$SNAPSHOT_NUM:${NC}"
    rsync -avn --delete $EXCLUDE_ARGS "$BACKUP/" "$CURRENT_DIR/" | grep -E '^(deleting|<|>)' || echo "  No changes"
    ;;

  rm)
    if [ -z "$2" ]; then
      echo -e "${RED}‚ùå Please specify snapshot number${NC}"
      echo "Use 'mgms list' to see available snapshots"
      exit 1
    fi

    # Find the Nth snapshot
    BACKUP=$(find "$BACKUP_ROOT" -maxdepth 1 -type d -name "${PROJECT_NAME}_*" -print0 2>/dev/null | \
             xargs -0 ls -td | sed -n "${2}p")

    if [ -z "$BACKUP" ]; then
      echo -e "${RED}‚ùå Snapshot #$2 not found${NC}"
      exit 1
    fi

    BACKUP_PATH="$BACKUP"
    SIZE=$(du -sh "$BACKUP_PATH" 2>/dev/null | awk '{print $1}')
    echo -e "${YELLOW}‚ö†Ô∏è  Delete snapshot:${NC}"
    echo -e "  ${BACKUP_PATH##*/} ($SIZE)"
    read -p "Continue? (y/n): " confirm

    if [[ "$confirm" =~ ^[Yy](es)?$ ]]; then
      rm -rf "$BACKUP_PATH"
      echo -e "${GREEN}‚úì Snapshot deleted${NC}"
    else
      echo "Cancelled"
    fi
    ;;

  clean|c)
    if [ ! -d "$BACKUP_ROOT" ]; then
      echo "No backups directory found"
      exit 0
    fi

    echo -e "${BLUE}Snapshots for ${PROJECT_NAME}:${NC}"
    COUNT=$(find "$BACKUP_ROOT" -maxdepth 1 -type d -name "${PROJECT_NAME}_*" 2>/dev/null | wc -l)

    if [ "$COUNT" -eq 0 ]; then
      echo "  No snapshots found for this project"
      exit 0
    fi

    # Show list
    IDX=1
    find "$BACKUP_ROOT" -maxdepth 1 -type d -name "${PROJECT_NAME}_*" -print0 2>/dev/null | \
      xargs -0 ls -td | \
      head -20 | \
      while IFS= read -r SNAP_PATH; do
        SIZE=$(du -sh "$SNAP_PATH" 2>/dev/null | awk '{print $1}' || echo "?")
        NAME="${SNAP_PATH##*/}"
        echo "  $IDX. $NAME ($SIZE)"
        IDX=$((IDX + 1))
      done

    echo ""
    echo -e "Total: $COUNT snapshot(s)"
    echo ""

    read -p "Delete ALL snapshots for $PROJECT_NAME? (y/n): " confirm
    if [[ "$confirm" =~ ^[Yy](es)?$ ]]; then
      find "$BACKUP_ROOT" -maxdepth 1 -type d -name "${PROJECT_NAME}_*" -exec rm -rf {} + 2>/dev/null
      echo -e "${GREEN}‚úì All snapshots deleted${NC}"
    else
      echo "Cancelled"
    fi
    ;;

  clear)
    if [ ! -d "$BACKUP_ROOT" ]; then
      echo "No backups directory found"
      exit 0
    fi

    TOTAL_SIZE=$(du -sh "$BACKUP_ROOT" 2>/dev/null | awk '{print $1}')
    TOTAL_COUNT=$(find "$BACKUP_ROOT" -maxdepth 1 -type d ! -path "$BACKUP_ROOT" 2>/dev/null | wc -l)

    if [ "$TOTAL_COUNT" -eq 0 ]; then
      echo "No snapshots found in backup directory"
      exit 0
    fi

    echo -e "${YELLOW}‚ö†Ô∏è  WARNING: This will delete ALL snapshots from ALL projects!${NC}"
    echo -e "  Backup directory: $BACKUP_ROOT"
    echo -e "  Total snapshots: $TOTAL_COUNT"
    echo -e "  Total size: $TOTAL_SIZE"
    echo ""
    read -p "Are you sure you want to delete EVERYTHING? (y/n): " confirm

    if [[ "$confirm" =~ ^[Yy](es)?$ ]]; then
      rm -rf "$BACKUP_ROOT"/*
      echo -e "${GREEN}‚úì All snapshots cleared${NC}"
    else
      echo "Cancelled"
    fi
    ;;

  auto)
    INTERVAL="${2:-5}"

    # Validate interval is a number
    if ! [[ "$INTERVAL" =~ ^[0-9]+$ ]]; then
      echo -e "${RED}‚ùå Interval must be a number (minutes)${NC}"
      exit 1
    fi

    echo -e "${BLUE}üåã Auto-snapshot mode started${NC}"
    echo -e "  Project: ${PROJECT_NAME}"
    echo -e "  Interval: ${INTERVAL} minute(s)"
    echo -e "  Press ${YELLOW}Ctrl+C${NC} to stop"
    echo ""

    SNAPSHOT_COUNT=0
    while true; do
      SNAPSHOT_COUNT=$((SNAPSHOT_COUNT + 1))
      TIMESTAMP=$(date +%Y%m%d_%H%M%S)
      BACKUP_PATH="$BACKUP_ROOT/${PROJECT_NAME}_${TIMESTAMP}_auto"

      echo -e "${GREEN}[$(date +%H:%M:%S)]${NC} Creating auto-snapshot #${SNAPSHOT_COUNT}..."
      mkdir -p "$BACKUP_PATH"
      rsync -a --quiet $EXCLUDE_ARGS "$CURRENT_DIR/" "$BACKUP_PATH/" 2>/dev/null
      SIZE=$(du -sh "$BACKUP_PATH" 2>/dev/null | awk '{print $1}')
      echo -e "${GREEN}‚úì${NC} Saved ($SIZE) - Next in ${INTERVAL}m"

      sleep $((INTERVAL * 60))
    done
    ;;

  config|cfg)
    echo -e "${BLUE}üåã Magmasnap Configuration:${NC}"
    echo "  Backup directory: $BACKUP_ROOT"
    echo "  Current location: $(readlink -f "$0" 2>/dev/null || echo "$0")"
    echo "  Excluded patterns: $EXCLUDE_PATTERNS"
    echo ""
    echo "To customize, edit the script or set:"
    echo "  export MAGMASNAP_DIR=/your/backup/path"
    ;;

  *)
    cat << 'EOFHELP'
üåã magmasnap - Ultra-minimal snapshot backup utility

Usage:
  mgms save [tag]   Create a snapshot (optionally with tag)
  mgms list         List all snapshots for current directory
  mgms restore [N]  Restore snapshot number N (default: latest)
  mgms diff [N]     Show changes since snapshot N (default: latest)
  mgms rm N         Remove specific snapshot number N
  mgms clean        Delete all snapshots for current directory
  mgms clear        Delete ALL snapshots from ALL projects
  mgms auto [MIN]   Auto-snapshot every N minutes (default: 5)
  mgms config       Show current configuration

Shortcuts: s (save), l (list), r (restore), d (diff), c (clean), cfg (config)

Examples:
  mgms save                    # Quick snapshot
  mgms save before-rebase      # Tagged snapshot
  mgms list                    # See all snapshots
  mgms restore                 # Restore latest (snapshot #1)
  mgms restore 2               # Restore snapshot #2
  mgms diff                    # See what changed since latest
  mgms diff 2                  # See changes since snapshot #2
  mgms rm 3                    # Remove snapshot #3
  mgms clean                   # Remove all snapshots for this project
  mgms clear                   # Remove ALL snapshots (all projects)
  mgms auto 3                  # Auto-snapshot every 3 minutes
  mgms auto                    # Auto-snapshot every 5 minutes (default)

Perfect for backing up before dangerous git operations!

Configuration:
  ‚Ä¢ Backups stored in: ~/.magmasnap
  ‚Ä¢ Custom location: export MAGMASNAP_DIR=/your/path
  ‚Ä¢ Zero config required - just run it!
EOFHELP
    [ -n "$1" ] && exit 1 || exit 0
    ;;
esac
